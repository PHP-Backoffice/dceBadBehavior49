<?php

/**
 * @package    plugins
 * @subpackage dceBadBehavior
 * @version    $Rev:$
 * @author     Ortwin Pinke
 * @copyright  Ortwin Pinke <www.dceonline.de>
 * @license    GPL
 * @link       http://www.dceonline.de
 *
 *   $Id:$
 */
defined('CON_FRAMEWORK') or die('Illegal call');

// Bad Behavior callback functions.
// Return current time in the format preferred by your database.
function bb2_db_date() {
    return gmdate('Y-m-d H:i:s'); // Example is MySQL format
}

// Return affected rows from most recent query.
function bb2_db_affected_rows() {
    return cRegistry::getDb()->affectedRows();
}

// Escape a string for database usage
function bb2_db_escape($string) {
    return cSecurity::escapeDB($string, cRegistry::getDb());
}

// Return the number of rows in a particular query.
function bb2_db_num_rows($result) {
    if ($result !== FALSE) {
        return count($result);
    }
    return 0;
}

// Run a query and return the results, if any.
// Should return FALSE if an error occurred.
// Bad Behavior will use the return value here in other callbacks.
function bb2_db_query($query) {
    return cRegistry::getDb()->query($query);
}

// Return all rows in a particular query.
// Should contain an array of all rows generated by calling mysql_fetch_assoc()
// or equivalent and appending the result of each call to an array.
function bb2_db_rows($result) {
    return cRegistry::getDb()->toArray();
}

/*
// Create the SQL query for inserting a record in the database.
// See example for MySQL elsewhere.
function bb2_insert($settings, $package, $key) {
    return "--";
}
 * 
 */

// Return emergency contact email address.
function bb2_email() {
    $oClient = cRegistry::getClient();
    $sEmail = $oClient->getProperty("pi_bad_behavior", "contact_email");
    return (empty($sEmail)) ? "no_email_set@no_reply.com" : $sEmail; // You need to change this.
}

// retrieve whitelist
function bb2_read_whitelist() {
    return @parse_ini_file(dirname(BB2_CORE) . "/whitelist.ini");
}

// retrieve settings from database
// Settings are hard-coded for non-database use
function bb2_read_settings() {
    global $bb2_settings_defaults;
    $settings = @parse_ini_file(dirname(__FILE__) . "/settings.ini");
    if (!$settings)
        $settings = array();
    return @array_merge($bb2_settings_defaults, $settings);
}

// write settings to database
function bb2_write_settings($settings) {
    return false;
}

// installation not needed, done by pim
function bb2_install() {
    return false;
}

// Screener
// Insert this into the <head> section of your HTML through a template call
// or whatever is appropriate. This is optional we'll fall back to cookies
// if you don't use it.
function bb2_insert_head() {
    global $bb2_javascript;
    echo $bb2_javascript;
}

// Display stats? This is optional.
function bb2_insert_stats($force = false) {
    $settings = bb2_read_settings();

    if ($force || $settings['display_stats']) {
        $blocked = bb2_db_query("SELECT COUNT(*) FROM " . $settings['log_table'] . " WHERE `key` NOT LIKE '00000000'");
        if ($blocked !== FALSE) {
            echo sprintf('<p><a href="http://bad-behavior.ioerror.us/">%1$s</a> %2$s <strong>%3$s</strong> %4$s</p>', __('Bad Behavior'), __('has blocked'), $blocked[0]["COUNT(*)"], __('access attempts in the last 7 days.'));
        }
    }
}

// Return the top-level relative path of wherever we are (for cookies)
// You should provide in $url the top-level URL for your site.
function bb2_relative_path() {
    //$url = parse_url(get_bloginfo('url'));
    //return $url['path'] . '/';
    return '/';
}
