<?php
/**
 * @package    Plugins
 * @subpackage dceBadBehavior
 * @version    $Rev:$
 * @author     Ortwin Pinke
 * @copyright  Ortwin Pinke <www.dceonline.de>
 * @license    GPL
 * @link       http://www.dceonline.de
 *
 *   $Id$
 */

defined('CON_FRAMEWORK') or die('Illegal call');

define('BB2_CWD', dirname(__FILE__).'/libs/bad-behavior');




// Calls inward to Bad Behavor itself.
require_once(BB2_CWD . "/bad-behavior/core.inc.php");
require_once(BB2_CWD . "/bad-behavior-mysql.php");

//lets do the startup
function bb2_startup() {    

    if(bb2_install() == true) bb2_start(bb2_read_settings());
}


// Bad Behavior callback functions.

/**
 *
 * @return string , formated date
 */
function bb2_db_date() {
	return gmdate('Y-m-d H:i:s');	// Example is MySQL format
}

/**
 *
 * @global object $db
 * @return int
 */
function bb2_db_affected_rows() {
    global $db;
    return $db->affected_rows();
}

/**
 * escapes a string for db use
 * @param string $string
 * @return string , escaped string
 */
function bb2_db_escape($string) {
	return cSecurity::escapeDB($string, cRegistry::getDb());
}

/**
 *
 * @param <type> $result
 * @return <type>
 */
function bb2_db_num_rows($result) {
	if ($result !== FALSE)
		return count($result);
	return 0;
}


/**
 * Run a query and return the results, if any.
 * Should return FALSE if an error occurred.
 * Bad Behavior will use the return value here in other callbacks.
 *
 * @global object $db
 * @param string $query
 * @return object
 */
function bb2_db_query($query) {
    global $db;
    return $db->query($query);
}

// Return all rows in a particular query.
// Should contain an array of all rows generated by calling mysql_fetch_assoc()
// or equivalent and appending the result of each call to an array.
/**
 *
 * @global object $db
 * @param object $result
 * @return array
 */
function bb2_db_rows($result) {
    global $db;
    return $db->copyResultToArray($result);
}

// Return emergency contact email address.
/**
 *
 * @return string , support email
 */
function bb2_email() {
    global $bb2_settings_defaults;
    $tmp_email = $bb2_settings_defaults['support-email'];
    if(!empty($tmp_email) AND $tmp_email != 'you@yourdomain.tld') {
        return $tmp_email;
    }
    return "no_reply@yourdomain.tld";
}

// retrieve settings from database
// Settings are hard-coded for non-database use
/**
 *
 * @global object $db
 * @global array $bb2_settings_defaults
 * @return array
 *
 * @todo use db to store settings
 */
function bb2_read_settings() {
	global $db, $bb2_settings_defaults;

	$settings = array(); //@parse_ini_file(dirname(__FILE__) . "/settings.ini");
	$tmp_array = array_merge($bb2_settings_defaults, $settings);
 return $tmp_array;
}

// write settings to database
/**
 *
 * @param array $settings
 * @return boolean
 */
function bb2_write_settings($settings) {
	return false;
}

/**
 * install db-tables if not present
 *
 * @global object $db
 * @global array $bb2_settings_defaults
 * @return <type>
 *
 * @todo conf table and checks
 */
function bb2_install() {
    global $db, $bb2_settings_defaults;
    $db->query("SHOW TABLES LIKE '".$bb2_settings_defaults['log_table']."'");
    if($db->num_rows() > 0) {
        return true;
    } else {
       bb2_db_query(bb2_table_structure($bb2_settings_defaults['log_table']));
    }
}

// Screener
// Insert this into the <head> section of your HTML through a template call
// or whatever is appropriate. This is optional we'll fall back to cookies
// if you don't use it.
function bb2_insert_head() {
	global $bb2_javascript;
	echo $bb2_javascript;
}

// Display stats? This is optional.
function bb2_insert_stats($force = false) {
	$settings = bb2_read_settings();

	if ($force || $settings['display_stats']) {
		$blocked = bb2_db_query("SELECT COUNT(*) FROM " . $settings['log_table'] . " WHERE `key` NOT LIKE '00000000'");
		if ($blocked !== FALSE) {
			echo sprintf('<p><a href="http://www.bad-behavior.ioerror.us/">%1$s</a> %2$s <strong>%3$s</strong> %4$s</p>', __('Bad Behavior'), __('has blocked'), $blocked[0]["COUNT(*)"], __('access attempts in the last 7 days.'));
		}
	}
}

// Return the top-level relative path of wherever we are (for cookies)
// You should provide in $url the top-level URL for your site.
function bb2_relative_path() {
    global $cfgClient, $client;
    $url = parse_url($cfgClient[$client]["path"]["htmlpath"]);
    return $url['path'];
}